#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


__version__ = (2016, 6, 20, 7, 57, 21, 0)

__all__ = [
    'signatureParser',
    'signatureSemantics',
    'main'
]

KEYWORDS = set([])


class signatureParser(Parser):
    def __init__(self,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=None,
                 left_recursion=True,
                 keywords=KEYWORDS,
                 **kwargs):
        super(signatureParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            keywords=keywords,
            **kwargs
        )

    @graken()
    def _tokIdentifier_(self):
        self._pattern(r'[a-zA-Z_][a-zA-Z_0-9]*')

    @graken()
    def _genericDef_(self):
        self._tokIdentifier_()
        self.name_last_node('cls')
        self._token('[')
        self._typeDef_()
        self.name_last_node('arg')
        self._token(']')

        self.ast._define(
            ['cls', 'arg'],
            []
        )

    @graken()
    def _typeDef_(self):
        with self._choice():
            with self._option():
                self._genericDef_()
            with self._option():
                self._tokIdentifier_()
            self._error('no available options')

    @graken()
    def _argument_(self):
        self._tokIdentifier_()
        self.name_last_node('name')
        with self._optional():
            self._token(':')
            self._typeDef_()
            self.name_last_node('type')

        self.ast._define(
            ['name', 'type'],
            []
        )

    @graken()
    def _marg_(self):
        self._token(',')
        self._argument_()
        self.name_last_node('@')

    @graken()
    def _argList_(self):
        self._token('(')
        with self._group():
            self._argument_()

            def block1():
                self._marg_()
            self._closure(block1)
        self.name_last_node('@')
        self._token(')')

    @graken()
    def _returnType_(self):
        self._token('->')
        self._typeDef_()
        self.name_last_node('@')

    @graken()
    def _signature_(self):
        self._tokIdentifier_()
        self.name_last_node('name')
        with self._optional():
            self._argList_()
        self.name_last_node('args')
        with self._optional():
            self._returnType_()
        self.name_last_node('returns')

        self.ast._define(
            ['name', 'args', 'returns'],
            []
        )


class signatureSemantics(object):
    def tokIdentifier(self, ast):
        return ast

    def genericDef(self, ast):
        return ast

    def typeDef(self, ast):
        return ast

    def argument(self, ast):
        return ast

    def marg(self, ast):
        return ast

    def argList(self, ast):
        return ast

    def returnType(self, ast):
        return ast

    def signature(self, ast):
        return ast


def main(
        filename,
        startrule,
        trace=False,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        **kwargs):

    with open(filename) as f:
        text = f.read()
    parser = signatureParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard,
        ignorecase=ignorecase,
        **kwargs)
    return ast

if __name__ == '__main__':
    import json
    ast = generic_main(main, signatureParser, name='signature')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()
